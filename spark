#!/usr/bin/env bash
#
# spark
# https://github.com/holman/spark
#
# Generates sparklines for a set of data.
#
# Here's a good web-based sparkline generator that was a bit of inspiration
# for spark:
#
#   https://datacollective.org/sparkblocks
#
# spark takes a comma-separated or space-separated list of data and then prints
# a sparkline out of it.
#
# Examples:
#
#   spark 1 5 22 13 53
#   # => ▁▁▃▂▇
#
#   spark 0 30 55 80 33 150
#   # => ▁▂▃▅▂▇
#
#   spark -h
#   # => Prints the spark help text.

: ${SPARK_UNKNOWN_DATA=×}

# Generates sparklines.
#
# $1 - The data we'd like to graph.
_echo()
{
  if [ "X$1" = "X-n" ]; then
    shift
    printf "%s" "$*"
  else
    printf "%s\n" "$*"
  fi
}

spark()
{
  local n numbers=

  # find min/max values
  local min=0xffffffff max=0

  for n
  do
    # on Linux (or with bash4) we could use `printf %.0f $n` here to
    # round the number but that doesn't work on OS X (bash3) nor does
    # `awk '{printf "%.0f",$1}' <<< $n` work, so just cut it off
    n=${n%.*}
    [[ "$n" =~ ^[[:digit:]]+$ ]] || continue
    (( n < min )) && min=$n
    (( n > max )) && max=$n
  done

  # print ticks
  local ticks=(▁ ▂ ▃ ▄ ▅ ▆ ▇ █)

  # use a high tick if data is constant
  (( min == max )) && ticks=(▅ ▆)

  local f=$(( (($max-$min)<<8)/(${#ticks[@]}-1) ))
  (( f < 1 )) && f=1

  for n
  do
    n=${n%.*}
    if [[ "$n" =~ ^[[:digit:]]+$ ]]; then
      _echo -n ${ticks[$(( ((($n-$min)<<8)/$f) ))]}
    else
      case "$n" in
        x)  _echo -n "$SPARK_UNKNOWN_DATA";;
        *)  _echo -n "$n";;
      esac
    fi
  done
  _echo
}

[ "$BASH_SOURCE" != "$0" ] && return # Skip command-line argument parsing when sourced.

# Prints the help text for spark.
help()
{
  local spark=$(basename $0)
  cat <<EOF

  USAGE:
    $spark [-h|--help] VALUE,...
    cat FILE [...] | $spark [...] [-]

    Separate whitespace arguments are taken over to the output.
    Unknown data can be marked with x.

  EXAMPLES:
    $spark 0 30 55 80 ' ' 80 55 30 0 $'\n' 0 0 30 30 0 0 55 0 0
    ▁▃▅█ █▅▃▁
    ▁▁▃▃▁▁▅▁▁
    $spark 1 5 22 x 53
    ▁▁▃${SPARK_UNKNOWN_DATA}█
    $spark 0,30,55,80,33,150
    ▁▂▃▄▂█
    echo 9 13 5 17 1 | $spark
    ▄▆▂█▁
EOF
}

# show help for no arguments if stdin is a terminal
if { [ -z "$1" ] && [ -t 0 ] ; } || [ "$1" == '-h' ] || [ "$1" == '--help' ]; then
  help
  exit 0
fi

if [ $# -eq 0 -o "$1" = '-' ]; then
  set -- $(tr , ' ')
else
  typeset -a numbers=()
  for arg
  do
    if [[ "$arg" =~ , ]]; then
      numbers+=(${arg//,/ })
    else
      numbers+=("$arg")
    fi
  done
  set -- "${numbers[@]}"
fi
spark "$@"
